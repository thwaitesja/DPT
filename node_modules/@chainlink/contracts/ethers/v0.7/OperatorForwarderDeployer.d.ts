/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface OperatorForwarderDeployerInterface extends Interface {
  functions: {
    acceptOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    createForwarder: TypedFunctionDescription<{ encode([]: []): string }>;

    getAuthorizedSenders: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    transferOwnership: TypedFunctionDescription<{
      encode([to]: [string]): string;
    }>;
  };

  events: {
    ForwarderDeployed: TypedEventDescription<{
      encodeTopics([forwarder]: [string | null]): string[];
    }>;

    OwnershipTransferRequested: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;
  };
}

export class OperatorForwarderDeployer extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): OperatorForwarderDeployer;
  attach(addressOrName: string): OperatorForwarderDeployer;
  deployed(): Promise<OperatorForwarderDeployer>;

  on(
    event: EventFilter | string,
    listener: Listener
  ): OperatorForwarderDeployer;
  once(
    event: EventFilter | string,
    listener: Listener
  ): OperatorForwarderDeployer;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): OperatorForwarderDeployer;
  removeAllListeners(
    eventName: EventFilter | string
  ): OperatorForwarderDeployer;
  removeListener(eventName: any, listener: Listener): OperatorForwarderDeployer;

  interface: OperatorForwarderDeployerInterface;

  functions: {
    acceptOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "acceptOwnership()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    createForwarder(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "createForwarder()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getAuthorizedSenders(overrides?: TransactionOverrides): Promise<string[]>;

    "getAuthorizedSenders()"(
      overrides?: TransactionOverrides
    ): Promise<string[]>;

    owner(overrides?: TransactionOverrides): Promise<string>;

    "owner()"(overrides?: TransactionOverrides): Promise<string>;

    transferOwnership(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "acceptOwnership()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  createForwarder(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "createForwarder()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getAuthorizedSenders(overrides?: TransactionOverrides): Promise<string[]>;

  "getAuthorizedSenders()"(overrides?: TransactionOverrides): Promise<string[]>;

  owner(overrides?: TransactionOverrides): Promise<string>;

  "owner()"(overrides?: TransactionOverrides): Promise<string>;

  transferOwnership(
    to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    ForwarderDeployed(forwarder: string | null): EventFilter;

    OwnershipTransferRequested(
      from: string | null,
      to: string | null
    ): EventFilter;

    OwnershipTransferred(from: string | null, to: string | null): EventFilter;
  };

  estimate: {
    acceptOwnership(overrides?: TransactionOverrides): Promise<BigNumber>;

    "acceptOwnership()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    createForwarder(overrides?: TransactionOverrides): Promise<BigNumber>;

    "createForwarder()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getAuthorizedSenders(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getAuthorizedSenders()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    owner(overrides?: TransactionOverrides): Promise<BigNumber>;

    "owner()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    transferOwnership(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
